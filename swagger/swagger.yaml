openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'Nutella API'
  description: 'Nutella API'

# servers:
#   - description: local server
#     url: http://localhost:7000
#   - description: nutella aws server
#     url: http://ec2-3-34-251-160.ap-northeast-2.compute.amazonaws.com:7000
    
tags:
  - name: 'Project'
    description: 'About projects'
    externalDocs:
      url: 'http://localhost:7000'
  - name: 'Run'
    description: 'About runs'
    externalDocs:
      url: 'http://localhost:7000'
  - name: 'Graph'
    description: 'About graphs'
    externalDocs:
      url: 'http://localhost:7000'      

paths:
  /admin/project:
    post:
      tags: 
        - "Project"
      summary: 프로젝트 생성 시 정보 받음
      requestBody:
        description: \{\"params\" \:\} 안에 보내기
        required: true
        content:
          application/json:
            schema:       
              $ref: '#/components/schema/Project1'                 
      responses:
        '200':
          description: Echo POST
    get:
      tags: 
        - "Project"
      summary: my space에서 카드 6개씩 읽어올 때
      parameters:
        - $ref: '#/components/parameters/page'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schema/ProjectCard'

  /admin/project/{id}:
    get:
      tags: 
        - "Project"
      summary: work space에서 프로젝트 정보 받아올 때, 기본 프로젝트 한 개 정보
      parameters:
        - $ref: '#/components/parameters/pjId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schema/Project2'
    delete:
      tags: 
        - "Project"
      summary: 프로젝트 삭제
      parameters:
        - $ref: '#/components/parameters/pjId'
      responses:
        '200':
          description: OK
    put:
      tags: 
        - "Project" 
      summary: 프로젝트 정보 업데이트
      requestBody:
        description: \{\"params\" \:\} 안에 보내기
        required: true
        content:
          application/json:
            schema:       
              $ref: '#/components/schema/Project1'
      parameters:
        - $ref: '#/components/parameters/pjId'
      responses:
        '200':
          description: OK            

  /admin/run:
    get:
      tags: 
        - "Run"
      summary: mypage에서 run 10개씩 읽어올 때
      parameters:
        - $ref: '#/components/parameters/page'               
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schema/RunCard'                    

  /admin/run/{id}:
    get:
      tags: 
        - "Run"
      summary: workspace에서 프로젝트 id에 따라 불러오기
      parameters:
        - $ref: '#/components/parameters/pjId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                - $ref: '#/components/schema/Run1'
                - $ref: '#/components/schema/Step1'
    delete:
      tags: 
        - "Run"
      summary: run id로 run 삭제
      parameters:
        - $ref: '#/components/parameters/rId'
      responses:
        '200':
          description: OK
    put:
      tags: 
        - "Run" 
      summary: run id로 run 이름 업데이트 
      requestBody:
        description: \{\"params\" \:\} 안에 보내기
        required: true
        content:
          application/json:
            schema:       
              $ref: '#/components/schema/Run2'
      parameters:
        - $ref: '#/components/parameters/rId'        
 
      responses:
        '200':
          description: OK

  /admin/graph/:id:
    get:
      tags: 
        - "Graph"
      summary: 그래프 그리기
      parameters:
        - $ref: '#/components/parameters/rId'
        - $ref: '#/components/parameters/index'        
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                - $ref: '#/components/schema/Step2'

components:
  schema:
    Project1:
      type: "object"
      properties:
        projectName:
          type: "string"        
        description:
          type: "string"
        privacy:
          type: "integer"

    Project2:
      type: "object"
      properties:
        projectId:
          type: "integer"
        projectName:
          type: "string"
        totalRuns:
          type: "integer"            
        
    ProjectCard:
      type: "object"
      properties:
        projectId:
          type: "integer"
        projectName:
          type: "string"
        description:
          type: "string"
        privacy:
          type: "integer"
        totalRuns:
          type: "integer"
        created_at:
          type: "string"
        
    Run1:
      type: "object"
      properties:
        runId:
          type: "integer"
        projectId:
          type: "integer"                  
        runName:
          type: "string"
        state:
          type: "string"
        runTime:
          type: "string"                    
        createdBy:
          type: "string"
        created_at:
          type: "string"            

    Run2:
      type: "object"
      properties:
        runId:
          type: "integer"        
        runName:
          type: "string"

    RunCard:
      type: "object"
      properties:
        runId:
          type: "integer"
        runName:
          type: "string"
        projectName:
          type: "string"
        state:
          type: "string"          
        updated_at:
          type: "string"  
          
    Step1:
      type: "object"
      properties:
        stepId:
          type: "integer"
        stepNumber:
          type: "integer"          
        reinit:
          type: "boolean"
        accuracy:
          type: "number"  
        loss:
          type: "number" 
        precision:
          type: "number"  
        recall:
          type: "number"  
        cpu:
          type: "number"  
        gpu:
          type: "number" 
        net:
          type: "number"  
        disk:
          type: "number"   

    Step2:
      type: "object"
      properties:
        stepId:
          type: "integer"
        runName:
          type: "string"          
        stepNumber:
          type: "integer"          
        accuracy:
          type: "number"  
        loss:
          type: "number" 
        precision:
          type: "number"  
        recall:
          type: "number"  
        cpu:
          type: "number"  
        gpu:
          type: "number" 
        net:
          type: "number"  
        disk:
          type: "number"            
          
  parameters:
    # req.query.
    page:
      name: page
      in: query
      required: true
      description: 페이지 값
      schema:
        type: integer
    index:
      name: index
      in: query
      required: true
      description: 그래프를 그리고 싶은 지표 이름
      schema:
        type: string        
    # req.params.      
    pjId:
      name: id
      in: path
      requried: true
      description: 프로젝트 ID 값
      schema:
        type: integer                  
    rId:
      name: id
      in: path
      requried: true
      description: 런 ID 값
      schema:
        type: integer                  